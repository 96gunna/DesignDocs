/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

// To run this script, move it into the OED direfctory 
// so that it has access to the 'axios' package.

const axios = require('axios').default;

// Set interceptors so that we are can time the requests to the server.
axios.interceptors.request.use(reqConfig => {
	// https://sabljakovich.medium.com/axios-response-time-capture-and-log-8ff54a02275d
	reqConfig.meta = reqConfig.meta || {};

	reqConfig.meta.requestStartedAt = new Date().getTime();

	return reqConfig;
})

axios.interceptors.response.use(resConfig => {
	resConfig.config.meta.elapsedTime = new Date().getTime() - resConfig.config.meta.requestStartedAt;
	return resConfig;
})

/**
 * Times a request to the server for data for a given meter id and time interval and returns the total number of points.
 * @param {string} startTimeStamp
 * @param {string} endTimestamp
 * @param {string | number} meterId 
 * @returns Elapsed time of request, total number of points
 */
async function requestDataFromInterval(startTimeStamp, endTimestamp, meterId) {
	const url = 'http://localhost:3000';
	const endPoint = `api/compressedReadings/line/meters/${meterId}?timeInterval=${startTimeStamp}_${endTimestamp}`;
	const res = await axios.get(`${url}/${endPoint}`);
	return [res.config.meta.elapsedTime, res.data['1'].length];
}


/*
 * We set up the database in the following way:
 * 1. It only contains minutely readings generated by
 * npm run generateOneMinuteTestingData
 * 2. The minutely readings is at index 1
 */

async function main() {
	// We deliberately wrap requests in a function so that the promises execute one after another.
	// rather than to submit all requests at once which would affect the execution time of each individual request.
	// The alternative would be to submit each request simultaneously via a forEach or Promise.all,
	// but we choose not to for the reason stated previously.

	const meterId = 1; // meter id of minute data in my db

	const timeIntervals = [
		['2020-01-01 00:00:00Z', '2020-04-15 00:00:00Z'],
		['2020-01-01 00:00:00Z', '2020-02-22 00:00:00Z'],
		['2020-01-01 00:00:00Z', '2020-02-19 00:00:00Z'],
		['2020-01-03 08:00:00Z', '2020-02-14 23:00:00Z'],
		['2020-01-24 16:00:00Z', '2020-02-14 23:00:00Z'],
		['2020-01-24 16:00:00Z', '2020-02-04 07:00:00Z'],
		['2020-02-02 12:00:00Z', '2020-02-04 08:59:00Z'],
		['2020-02-03 12:00:00Z', '2020-02-04 09:39:00Z'],
		['2020-02-04 12:00:00Z', '2020-02-04 22:49:00Z']
	];

	for (let i = 0; i < timeIntervals.length; i++) {
		const [startTimeStamp, endTimestamp] = timeIntervals[i];
		let averageElapsedTime = 0;
		const numRequests = 10; // average elapsed time over 5 requests
		let numPoints = 0; 
		for (let j = 0; j < numRequests; j++) {
			await requestDataFromInterval(startTimeStamp, endTimestamp, meterId)
				.then(([et, np]) => {
					averageElapsedTime += et;
					// commented out for clarity
					// console.log(`### For request #${i, j} in between ${startTimeStamp}, ${endTimestamp}:`)
					// console.log(`#### Elapsed time: ${et} ms`)
					numPoints = np;
				})
				.catch(console.log)
		}
		averageElapsedTime = averageElapsedTime / numRequests;
		console.log(`###### AVERAGE elapsed time for request #${i} in between ${startTimeStamp}, ${endTimestamp}: ${averageElapsedTime} ms`)
		console.log(`###### NUMBER OF POINTS for request #${i}: ${numPoints}`)
	}
}

main();
